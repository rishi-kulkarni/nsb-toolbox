import zipfile
import xml.etree.ElementTree
import os
import argparse


def validate_path(path_string: str) -> str:
    """Validates that incoming path exists.

    Parameters
    ----------
    path_string : str

    Returns
    -------
    path_string

    Raises
    ------
    FileNotFoundError

    """
    if os.path.exists(path_string):
        return path_string
    else:
        raise FileNotFoundError(f"No such file: {path_string}")


def docx_to_txt_stream(path_to_docx: str) -> list:
    """Reads a formatted Science Bowl round.

    Parameters
    ----------
    path_to_docx : str

    Returns
    -------
    list
        List of words in the target docx.
    """
    WORD_NAMESPACE = "{http://schemas.openxmlformats.org/wordprocessingml/2006/main}"
    PARA = WORD_NAMESPACE + "p"
    TEXT = WORD_NAMESPACE + "t"
    TABLE = WORD_NAMESPACE + "tbl"
    ROW = WORD_NAMESPACE + "tr"
    CELL = WORD_NAMESPACE + "tc"

    with zipfile.ZipFile(path_to_docx) as docx:
        tree = xml.etree.ElementTree.XML(docx.read("word/document.xml"))

    words = []
    for paragraph in tree.iter(PARA):
        words += list(paragraph.itertext())

    return " ".join(words).split()


def docx_clean_stream(word_stream: list) -> list:
    """Concatenates hanging closing parentheses that ElementTree doesn't handle.

    There might be some option in ElementTree.XML that I can't find that does this
    for you. If so, remove this function.

    Parameters
    ----------
    word_stream : list of str
        List of strings generated by docx_to_txt_stream

    Returns
    -------
    list of str
    """
    out = []
    iterator = enumerate(word_stream)
    for idx, word in iterator:
        if word_stream[idx] == ")":
            out[-1] = "".join([out[-1], ")"])
        else:
            out.append(word)
    return out


if __name__ == "__main__":

    argparser = argparse.ArgumentParser(
        description="Parser for Science Bowl .docx files."
    )
    argparser.add_argument(
        "path",
        metavar="path",
        type=str,
        help="path to the Science Bowl docx file",
    )

    args = argparser.parse_args()

    path_to_data = validate_path(args.path)

    raw_text = docx_to_txt_stream(path_to_data)

    clean_text = docx_clean_stream(raw_text)
